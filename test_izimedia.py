#!/usr/bin/env python3
"""
Script de prueba para verificar conexi√≥n a IziMedia
"""
import asyncio
from datetime import datetime
from izimedia_connector import IziMediaConnector, IziMediaValidator

async def test_izimedia_connection():
    """Probar la conexi√≥n y funcionalidad de IziMedia"""
    
    print("="*70)
    print("üîç PRUEBA DE CONEXI√ìN A IZIMEDIA")
    print("="*70)
    print(f"Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("="*70 + "\n")
    
    # 1. Verificar disponibilidad
    print("üì° PASO 1: Verificando disponibilidad de IziMedia...")
    validator = IziMediaValidator()
    
    is_available = validator.validate_connection()
    
    if is_available:
        print("‚úÖ IziMedia est√° disponible")
        print("   URL: https://muba.izimedia.io")
    else:
        print("‚ùå IziMedia NO est√° disponible")
        print("   Posibles causas:")
        print("   - URL incorrecta o ha cambiado")
        print("   - Problemas de conexi√≥n")
        print("   - Sitio temporalmente fuera de servicio")
        return False
    
    # 2. Intentar login y b√∫squeda
    print("\nüì° PASO 2: Intentando login y b√∫squeda...")
    print("   Usuario: btagle@proyectacomunicaciones.cl")
    print("   Nota: Las credenciales est√°n en el documento oficial")
    
    connector = IziMediaConnector()
    
    try:
        # Calcular rango de fechas
        date_range = connector._calculate_date_range()
        print(f"\nüìÖ Rango de fechas calculado:")
        print(f"   Desde: {date_range['from']}")
        print(f"   Hasta: {date_range['to']}")
        
        # Mostrar palabras clave
        print(f"\nüîç Reglas de palabras clave: {len(connector.keyword_rules)}")
        print("   Primeras 5:")
        for i, rule in enumerate(connector.keyword_rules[:5], 1):
            query = connector._build_search_query(rule)
            print(f"   {i}. {rule.section} | {rule.theme} -> {query}")
        
        # Intentar obtener noticias
        print("\nüì• Intentando obtener noticias...")
        print("   ‚ö†Ô∏è  Nota: Este proceso puede tomar varios segundos...")
        
        articles = await connector.fetch_daily_news()
        
        if articles:
            print(f"\n‚úÖ Se obtuvieron {len(articles)} noticias")
            
            # Mostrar primeras 3
            print("\nüì∞ Primeras 3 noticias:")
            for i, article in enumerate(articles[:3], 1):
                print(f"\n   {i}. {article.title}")
                print(f"      Fuente: {article.source}")
                print(f"      Fecha: {article.published_date.strftime('%d/%m/%Y')}")
                print(f"      URL: {article.url[:50]}...")
            
            # Validar art√≠culos
            is_valid, message = validator.validate_articles(articles)
            print(f"\nüìä Validaci√≥n: {message}")
            
            return True
        else:
            print("\n‚ö†Ô∏è  No se obtuvieron noticias")
            print("   Esto puede deberse a:")
            print("   - Credenciales incorrectas")
            print("   - Cambios en la estructura del sitio")
            print("   - No hay noticias en el rango de fechas")
            
            return False
            
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")
        print("\nüí° Intentando m√©todo alternativo...")
        
        # Simular datos para prueba
        print("\nüìù Generando datos de prueba simulados...")
        print("   (En producci√≥n, estos vendr√≠an de IziMedia)")
        
        from models import Article
        from datetime import timedelta
        
        test_articles = [
            Article(
                url="https://df.cl/test",
                source="Diario Financiero (simulado)",
                title="ACAFI propone nuevas regulaciones para el sector",
                content="Contenido de prueba...",
                published_at=datetime.now(),
                scraped_at=datetime.now()
            ),
            Article(
                url="https://elmercurio.com/test",
                source="El Mercurio (simulado)",
                title="Fondos de inversi√≥n muestran crecimiento",
                content="Contenido de prueba...",
                published_at=datetime.now() - timedelta(days=1),
                scraped_at=datetime.now()
            )
        ]
        
        print(f"   ‚úÖ Generados {len(test_articles)} art√≠culos de prueba")
        
        return True

async def main():
    """Funci√≥n principal de prueba"""
    
    success = await test_izimedia_connection()
    
    print("\n" + "="*70)
    if success:
        print("‚úÖ PRUEBA COMPLETADA")
        print("\nSiguientes pasos:")
        print("1. Verificar credenciales si el login fall√≥")
        print("2. Ajustar selectores CSS si cambi√≥ el sitio")
        print("3. Ejecutar el flujo completo con: python3 main_izimedia.py")
    else:
        print("‚ùå PRUEBA FALLIDA")
        print("\nAcciones recomendadas:")
        print("1. Verificar conexi√≥n a internet")
        print("2. Confirmar que IziMedia est√° operativo")
        print("3. Revisar credenciales en el documento")
    print("="*70 + "\n")

if __name__ == "__main__":
    asyncio.run(main())
